{"version":3,"sources":["../node_modules/typescript/lib sync","components/fileInfo/FileInfo.jsx","services/file-system-service.js","context/FilesContext.js","components/monacoEditor/MonacoEditor.jsx","pages/editorPage_OLD/EditorPage.jsx","components/directoryContents/components/folderItem/components/folderIcon/FolderIcon.jsx","components/directoryContents/components/folderItem/components/childItems/ChildItems.jsx","components/directoryContents/components/folderItem/FolderItem.jsx","components/directoryContents/components/fileItem/components/fileIcon/FileIcon.jsx","components/directoryContents/components/fileItem/FileItem.jsx","components/directoryContents/components/fileOrFolderList/FileOrFolderList.jsx","components/directoryContents/DirectoryContents.jsx","components/fileCreator/FileCreator.jsx","services/component-create-service.js","pages/fileCreationPage/FileCreationPage.jsx","components/navRouter/NavRouter.jsx","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","FileInfo","fileHandle","className","isDirectory","toString","isFile","name","writeFile","contents","a","async","createWriter","writer","truncate","write","close","getNewTextFileHandle","opts","type","accepts","description","extensions","mimeTypes","window","chooseFileSystemEntries","getFilesFromDirectory","directoryHandle","getEntries","handlesEntriesIterator","handlesArray","handle","push","FilesContext","createContext","FilesContextProvider","props","setFileHandleAndValues","value","remove","state","fileHandleAndValues","find","x","arrayItem","newItem","newArray","findIndex","item","setState","console","log","selectTab","selectedIndex","filesOpenend","indexOf","fileSelected","closeTab","closingIndex","newFilesOpenendState","splice","length","newHandleOpened","undefined","newFileSelectedState","addFiles","items","isArray","includes","removeFiles","list","Provider","this","children","Component","MonacoEditor","selectedFile","editorRef","bubbleFileContents","useRef","useState","textBoxContent","setTextBoxContent","useContext","useEffect","getFile","fileRead","text","fileText","getFileContents","language","editorDidMount","_valueGetter","editor","current","onDidChangeModelContent","ev","getValue","monaco","init","then","getModel","catch","error","theme","EditorPage","setFileHandle","updateTextAndFile","onClick","showFilePicker","folderHandle","showFolderPicker","saveFile","FolderIcon","open","setOpen","isOpen","size","ChildItems","parent","show","folderContentsHandles","setFolderContentsHandles","refreshInludedFiles","filesOrFoldersHandles","map","entry","key","FolderItem","stopPropagation","preventDefault","handleMenuClick","FileIcon","filename","src","getIconForFile","alt","FileItem","FileOrFolderList","DirectoryContents","folder","FileCreatorByName","createFile","createFolder","refresh","fileName","setFileName","addToast","useToasts","createFolderJsxScss","directoryName","charAt","toLowerCase","slice","toUpperCase","newFolder","newFile","componentContents","fs","onChange","target","appearance","autoDismiss","FileCreationPage","setFolderHandle","setSelectedFile","useCallback","createNewTxtFileHandle","create","createNewFolderHandle","parentDirectoryHandle","getDirectory","tab","style","display","NavRouter","route","setRoute","href","handleAnchorClick","renderRoute","App","autoDismissTimeout","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6c7972f.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 67;","import React from 'react'\r\nimport './FileInfo.scss'\r\n\r\nexport const FileInfo = ({ fileHandle }) => {\r\n\r\n    return (\r\n        <div className=\"file-info\">\r\n            {!fileHandle ? (<div>No File Info</div>) : (\r\n                <div className=\"file-info-content\">\r\n                    <div className=\"is-directory\">\r\n                        isDirectory: {fileHandle.isDirectory.toString()}\r\n                    </div>\r\n                    <div className=\"is-file\">\r\n                        isFile: {fileHandle.isFile.toString()}\r\n                    </div>\r\n                    <div className=\"file-name\">\r\n                        name: {fileHandle.name}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","// TOP - stop scrolling up\r\n// ^\r\n\r\nexport const writeFile = async (fileHandle, contents) => {\r\n    const writer = await fileHandle.createWriter();\r\n    await writer.truncate(0);// Make sure we start with an empty file\r\n    await writer.write(0, contents);\r\n    await writer.close();\r\n}\r\n\r\n// THIS - is how you programmatically create a new file, in a directory, if not exists.\r\n// fileHandle = await directoryHandle.getFile(name, { create: true })\r\n\r\nexport const getNewTextFileHandle = async () => {\r\n    const opts = {\r\n        type: 'saveFile',\r\n        accepts: [{\r\n            description: 'Text file',\r\n            extensions: ['txt'],\r\n            mimeTypes: ['text/plain'],\r\n        }],\r\n    };\r\n    return await window.chooseFileSystemEntries(opts);\r\n}\r\n\r\nexport const getFilesFromDirectory = async (directoryHandle) => {\r\n    const handlesEntriesIterator = await directoryHandle.getEntries()\r\n    const handlesArray = []\r\n    for await (const handle of handlesEntriesIterator) {\r\n        handlesArray.push(handle)\r\n    }\r\n    return handlesArray\r\n}","import React, { Component, createContext } from 'react'\r\nimport { isTypeNode } from 'typescript'\r\n\r\nexport const FilesContext = createContext()\r\n\r\nexport class FilesContextProvider extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            filesOpenend: [],\r\n            addFiles: this.addFiles,\r\n            removeFiles: this.removeFiles,\r\n            selectTab: this.selectTab,\r\n            closeTab: this.closeTab,\r\n            fileSelected: undefined,\r\n            fileHandleAndValues: [],\r\n            setFileHandleAndValues: this.setFileHandleAndValues,\r\n        }\r\n    }\r\n\r\n    setFileHandleAndValues = (handle, value, remove) => {\r\n        if (this.state.fileHandleAndValues.find(x => x.handle === handle)) {\r\n            const arrayItem = this.state.fileHandleAndValues.find(x => x.handle === handle)\r\n            let newItem = { ...arrayItem }\r\n            newItem.value = value\r\n            let newArray = [...this.state.fileHandleAndValues]\r\n            const originalIndex = this.state.fileHandleAndValues.findIndex(item => item.handle === handle)\r\n            newArray[originalIndex] = newItem\r\n            this.setState({ fileHandleAndValues: newArray })\r\n            console.log(this.state.fileHandleAndValues)\r\n        } else {\r\n            this.setState({ fileHandleAndValues: [...this.state.fileHandleAndValues, { handle, value }] })\r\n            console.log(this.state.fileHandleAndValues)\r\n        }\r\n    }\r\n\r\n    selectTab = (handle) => {\r\n        const selectedIndex = this.state.filesOpenend.indexOf(handle)\r\n        const fileSelected = this.state.filesOpenend[selectedIndex]\r\n        this.setState({ fileSelected })\r\n    }\r\n\r\n    closeTab = (handle) => {\r\n        const closingIndex = this.state.filesOpenend.indexOf(handle)\r\n        const newFilesOpenendState = [...this.state.filesOpenend]\r\n        newFilesOpenendState.splice(closingIndex, 1)\r\n        if (this.state.fileSelected === handle) {\r\n            this.setState({ filesOpenend: newFilesOpenendState }, () => {\r\n                if (this.state.filesOpenend.length > 0 && (closingIndex - 1) > -1) {\r\n                    const newHandleOpened = newFilesOpenendState[closingIndex - 1]\r\n                    this.selectTab(newHandleOpened)\r\n                } else if (this.state.filesOpenend.length > 0 && (closingIndex + 1) > -1) {\r\n                    const newHandleOpened = newFilesOpenendState[closingIndex + 1] || newFilesOpenendState[0]\r\n                    this.selectTab(newHandleOpened)\r\n                } else {\r\n                    this.setState({ fileSelected: undefined })\r\n                }\r\n            })\r\n        } else {\r\n            const newFileSelectedState = this.state.fileSelected;\r\n            this.setState({ filesOpenend: newFilesOpenendState }, () => {\r\n                this.selectTab(newFileSelectedState)\r\n            })\r\n        }\r\n    }\r\n\r\n    addFiles = (items) => {\r\n        if (items.isArray) { // should not be list... single responsibility\r\n            this.setState({\r\n                filesOpenend: [...this.state.filesOpenend, ...items]\r\n            }, () => {\r\n                this.setState({ fileSelected: items[0] })\r\n            })\r\n        } else {\r\n            if (this.state.filesOpenend.includes(items)) {\r\n                this.setState({ fileSelected: items })\r\n            } else {\r\n                this.setState({\r\n                    filesOpenend: [...this.state.filesOpenend, items]\r\n                }, () => {\r\n                    this.setState({ fileSelected: items })\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    removeFiles = (list) => {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <FilesContext.Provider value={this.state}>{this.props.children}</FilesContext.Provider>\r\n        );\r\n    }\r\n}\r\n","import React, { useRef, useState, useEffect, useContext } from 'react'\nimport './MonacoEditor.scss'\nimport Editor, { monaco } from '@monaco-editor/react';\nimport { FilesContext } from '../../context/FilesContext'\n\n\nexport const MonacoEditor = ({ selectedFile, bubbleFileContents }) => {\n    const editorRef = useRef();\n    const [textBoxContent, setTextBoxContent] = useState('')\n    const { setFileHandleAndValues } = useContext(FilesContext)\n\n\n    useEffect(() => {\n        if (selectedFile) {\n            const getFileContents = async () => {\n                const fileRead = await selectedFile.getFile()\n                const fileText = await fileRead.text()\n                setTextBoxContent(fileText)\n            }\n            getFileContents()\n        }\n    }, [selectedFile])\n\n    const getFileContents = () => {\n        return editorRef.current.getValue()\n    }\n\n    function handleEditorDidMount(_valueGetter, editor) {\n        editorRef.current = editor;\n        // Now you can use the instance of monaco editor\n        // in this component whenever you want\n        //bubbleFileContents(() => getFileContents)\n\n        editorRef.current.onDidChangeModelContent(ev => {\n            setFileHandleAndValues(selectedFile, editorRef.current.getValue());\n        });\n        // Inline solution? https://github.com/Microsoft/monaco-editor/issues/264\n        // complex worker-solution: https://github.com/cancerberoSgx/jsx-alone/blob/master/jsx-explorer/HOWTO_JSX_MONACO.md\n        // GitHub: https://github.com/SurenAt93/monaco-react#monaco-instance\n        debugger;\n        monaco\n            .init()\n            .then(monaco => {\n                //var hat = monaco.getModel()\n                //var hat2 = _valueGetter.getModel\n                var hat3 = editor.getModel()\n                debugger;/* here is the instance of monaco, so you can use the `monaco.languages` or whatever you want */\n                // monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n                //     target: monaco.languages.typescript.ScriptTarget.ES2016,\n                //     allowNonTsExtensions: true,\n                //     moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n                //     module: monaco.languages.typescript.ModuleKind.CommonJS,\n                //     noEmit: true,\n                //     typeRoots: [\"node_modules/@types\"],\n                //     jsx: monaco.languages.typescript.JsxEmit.React,\n                //     jsxFactory: 'JSXAlone.createElement',\n                // })\n            })\n            .catch(error => console.error('An error occurred during initialization of Monaco: ', error));\n    }\n\n    if (selectedFile) {\n        return (\n            <Editor\n                language=\"javascript\"\n                value={textBoxContent}\n                editorDidMount={handleEditorDidMount}\n                theme='vs-dark'\n            />\n        )\n    } else {\n        return null\n    }\n\n}\n","import React, { useState } from 'react'\r\nimport './EditorPage.scss'\r\nimport { FileInfo } from '../../components/fileInfo/FileInfo'\r\nimport { writeFile, getNewTextFileHandle } from '../../services/file-system-service'\r\nimport { MonacoEditor } from '../../components/monacoEditor/MonacoEditor'\r\n\r\nexport const EditorPage = () => {\r\n    const [fileHandle, setFileHandle] = useState(null)\r\n    const [textBoxContent, setTextBoxContent] = useState('')\r\n\r\n\r\n\r\n    const updateTextAndFile = (text, handle) => {\r\n        setTextBoxContent(text)\r\n        setFileHandle(handle)\r\n    }\r\n\r\n    const showFilePicker = async () => {\r\n        const fileHandle = await window.chooseFileSystemEntries({ type: 'openFile' })\r\n        const fileRead = await fileHandle.getFile()\r\n        const fileText = await fileRead.text()\r\n        updateTextAndFile(fileText, fileHandle)\r\n    }\r\n\r\n    // use getEntries() on a directory-handle to get all file reference?\r\n    // try it, list directory contents\r\n    const showFolderPicker = async () => {\r\n        const folderHandle = await window.chooseFileSystemEntries({ type: 'openDirectory' })\r\n        updateTextAndFile('', folderHandle)\r\n    }\r\n\r\n    const clearFile = () => updateTextAndFile('', null)\r\n\r\n    const saveFile = async (fileHandle, contents) => {\r\n        if (!fileHandle) { // save-as\r\n            fileHandle = await getNewTextFileHandle();\r\n        }\r\n        await writeFile(fileHandle, contents);\r\n    }\r\n\r\n    // const handleTxtTyped = event => setTextBoxContent(event.target.value)\r\n\r\n    return (\r\n        <div className=\"upload-info-component\">\r\n            <div className=\"file-buttons\">\r\n                <button onClick={() => showFilePicker()}>\r\n                    Choose File\r\n                </button>\r\n                <button onClick={() => showFolderPicker()}>\r\n                    Choose Folder\r\n                </button>\r\n                <button onClick={() => saveFile(fileHandle, textBoxContent)}>\r\n                    Save File\r\n                </button>\r\n                <button onClick={clearFile}>\r\n                    Clear\r\n                </button>\r\n            </div>\r\n\r\n            <FileInfo fileHandle={fileHandle} />\r\n\r\n            <div className=\"flex justify-center align-center vh-75-h\">\r\n                {!fileHandle && !textBoxContent ? null : (\r\n                    <div className=\"editor-container\">\r\n                        <MonacoEditor textBoxContent={textBoxContent} setTextBoxContent={setTextBoxContent} />\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\nimport './FolderIcon.scss'\nimport { MdKeyboardArrowRight } from \"react-icons/md\"\n\n\nexport const FolderIcon = (props) => {\n    const [open, setOpen] = useState(false);\n\n    useEffect(() => {\n        const isOpen = props.open === true ? true : false;\n        setOpen(isOpen);\n    }, [props.open])\n\n    return (\n        <div className={`icon-container${open ? ' open' : ''}`}>\n            <MdKeyboardArrowRight size=\"20px\" />\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport './ChildItems.scss'\nimport { getFilesFromDirectory } from '../../../../../../services/file-system-service'\nimport { FileOrFolderList } from '../../../fileOrFolderList/FileOrFolderList'\n\nexport const ChildItems = ({ parent, show }) => {\n    const [folderContentsHandles, setFolderContentsHandles] = useState(null)\n\n    useEffect(() => {\n        refreshInludedFiles(parent)\n    }, [parent, show])\n\n    const refreshInludedFiles = async (handle) => {\n        const filesOrFoldersHandles = await getFilesFromDirectory(handle)\n        setFolderContentsHandles(filesOrFoldersHandles)\n    }\n\n    if (show && folderContentsHandles) {\n        return (\n            <div className=\"child-items\">\n                {folderContentsHandles.map(entry => (\n                    <FileOrFolderList key={entry.name} entry={entry} />\n                ))}\n            </div>\n        )\n    } else {\n        return null\n    }\n\n}\n","import React, { useState } from 'react'\nimport './FolderItem.scss'\nimport { FolderIcon } from './components/folderIcon/FolderIcon'\nimport { ChildItems } from './components/childItems/ChildItems'\n\nexport const FolderItem = ({ entry }) => {\n    const [open, setOpen] = useState(false)\n\n    const handleMenuClick = (e) => {\n        debugger;\n        e.stopPropagation();\n        debugger;\n        e.preventDefault()\n    }\n\n    return (\n        <div className=\"folder-item-conatiner\">\n            <div className=\"folder-item\" key={entry.name} onClick={() => setOpen(!open)}>\n                <FolderIcon open={open} />\n                <div className=\"folder-name-button\">\n                    <div>{entry.name}</div>\n                    <div className=\"item-folder-menu\" onClick={(e) => { handleMenuClick(e) }}>\n                        (...)\n                    </div>\n                    {/* ^^ can maybe move this out by overlaying it and having a pointer-events: none everywhere but on the (...) That would work */}\n                </div>\n\n            </div>\n\n            <ChildItems parent={entry} show={open} />\n\n        </div>\n\n    )\n}\n","import React from 'react'\nimport './FileIcon.scss'\nimport { getIconForFile } from 'vscode-icons-js'\n// import { getIconForFile } from '/'\nexport const FileIcon = ({ filename }) => {\n    return (\n        <div className={`file-icon-container`}>\n            <img src={`./assets/icons/${getIconForFile(filename)}`}\n                alt=\"file\"></img>\n        </div>\n    )\n}\n","import React, { useContext } from 'react'\nimport './FileItem.scss'\nimport { FileIcon } from './components/fileIcon/FileIcon'\nimport { FilesContext } from '../../../../context/FilesContext'\n\nexport const FileItem = ({ entry }) => {\n    const { addFiles } = useContext(FilesContext)\n\n    return (\n        <div className=\"file-item\" key={entry.name} onClick={() => addFiles(entry)}>\n            <FileIcon filename={entry.name} />\n            <div>{entry.name}</div>\n        </div>\n    )\n}\n","import React from 'react'\nimport './FileOrFolderList.scss'\nimport { FolderItem } from '../folderItem/FolderItem'\nimport { FileItem } from '../fileItem/FileItem'\n\nexport const FileOrFolderList = ({ entry }) => {\n    if (entry.isDirectory) {\n        return (<FolderItem entry={entry} />)\n    } else {\n        return (<FileItem entry={entry} />)\n    }\n}\n","import React from 'react'\r\nimport './DirectoryContents.scss'\r\nimport { FileOrFolderList } from './components/fileOrFolderList/FileOrFolderList'\r\n\r\nexport const DirectoryContents = ({ contents, folder }) => {\r\n    if (!contents) {\r\n        return (<div className=\"main-folder-list-container\">No Folder Selected</div>)\r\n    } else if (contents.length === 0) {\r\n        return (<div className=\"main-folder-list-container\">Folder Empty</div>)\r\n    } else {\r\n        return (\r\n            <div className=\"main-folder-list-container\">\r\n                <div>'{folder.name}' Contents:</div>\r\n                <div className=\"main-folder-list\">\r\n                    {contents.map(entry => (\r\n                        <FileOrFolderList key={entry.name} entry={entry} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState, } from 'react'\r\nimport * as fs from '../../services/file-system-service'\r\nimport { getComponentContents } from '../../services/component-create-service'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport './FileCreator.scss'\r\n\r\nexport const FileCreatorByName = ({ createFile, createFolder, directoryHandle, refresh }) => {\r\n    const [fileName, setFileName] = useState('')\r\n    const { addToast } = useToasts()\r\n\r\n    const createAndRefresh = async () => {\r\n        if (!fileName) {\r\n            addToast('No component name entered', { appearance: 'error', autoDismiss: true })\r\n        } else {\r\n            try {\r\n                await createFolderJsxScss(directoryHandle, fileName)\r\n                await refresh(directoryHandle)\r\n                setFileName('')\r\n                addToast('Component created successfully', { appearance: 'success', autoDismiss: true })\r\n            } catch {\r\n                addToast('Component creation failed', { appearance: 'error', autoDismiss: true })\r\n            }\r\n        }\r\n    }\r\n\r\n    const createFolderJsxScss = async (directoryHandle, fileName) => {\r\n        const directoryName = fileName.charAt(0).toLowerCase() + fileName.slice(1)\r\n        fileName = fileName.charAt(0).toUpperCase() + fileName.slice(1)\r\n        const newFolder = await createFolder(directoryHandle, directoryName)\r\n        const newFile = await createFile(newFolder, `${fileName}.tsx`)\r\n        const componentContents = getComponentContents(fileName)\r\n        await fs.writeFile(newFile, componentContents)\r\n        await createFile(newFolder, `${fileName}.scss`)\r\n    }\r\n\r\n    if (directoryHandle) {\r\n        return (\r\n            <div className=\"file-creator\">\r\n                <input type=\"text\" value={fileName} onChange={(e) => setFileName(e.target.value)} />\r\n                <button onClick={createAndRefresh}>\r\n                    Create\r\n                </button>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}","//Top\r\n\r\nexport const getComponentContents = (name) => {\r\n\r\n    return (\r\n        `import React from 'react'\r\nimport './${name}.scss'\r\n\r\nexport const ${name} = () => {\r\n\r\n    return (\r\n        <div>${name} works!</div>\r\n    )\r\n}\r\n    `)\r\n}","import React, { useState, useCallback, useContext, useEffect } from 'react'\r\nimport './FileCreationPage.scss'\r\nimport * as fs from '../../services/file-system-service'\r\nimport { DirectoryContents } from '../../components/directoryContents/DirectoryContents'\r\nimport { FileCreatorByName } from '../../components/fileCreator/FileCreator'\r\nimport { MonacoEditor } from '../../components/monacoEditor/MonacoEditor'\r\nimport { FilesContext } from '../../context/FilesContext'\r\n\r\nexport const FileCreationPage = () => {\r\n    const [folderHandle, setFolderHandle] = useState(null)\r\n    const [folderContentsHandles, setFolderContentsHandles] = useState(null)\r\n    const [selectedFile, setSelectedFile] = useState(null)\r\n    const { filesOpenend, selectTab, closeTab, fileSelected, fileHandleAndValues } = useContext(FilesContext)\r\n\r\n    useEffect(() => {\r\n        if (filesOpenend && filesOpenend.length > 0) {\r\n            setSelectedFile(fileSelected)\r\n        }\r\n    }, [filesOpenend, fileSelected])\r\n\r\n    const showFolderPicker = async () => {\r\n        const handle = await window.chooseFileSystemEntries({ type: 'openDirectory' })\r\n        setFolderHandle(handle)\r\n        await refreshInludedFiles(handle)\r\n    }\r\n\r\n    const refreshInludedFiles = useCallback(async (handle) => { // maybe just add to folderContentsHandles array?\r\n        const filesOrFoldersHandles = await fs.getFilesFromDirectory(handle)\r\n        console.log(filesOrFoldersHandles)\r\n        setFolderContentsHandles(filesOrFoldersHandles)\r\n    }, [])\r\n\r\n    const clearFile = () => {\r\n        setFolderHandle(null)\r\n        setFolderContentsHandles(null)\r\n    }\r\n\r\n    const createNewTxtFileHandle = useCallback(async (directoryHandle, name) => {\r\n        return await directoryHandle.getFile(name, { create: true })\r\n    }, [])\r\n\r\n    const createNewFolderHandle = useCallback(async (parentDirectoryHandle, name) => {\r\n        return await parentDirectoryHandle.getDirectory(name, { create: true })\r\n    }, [])\r\n    //subdirHandle = await directoryHandle . getDirectory(name, { create: true })\r\n\r\n\r\n    // use getEntries() on a directory-handle to get all file reference?\r\n\r\n\r\n    const saveFile = async (fileHandle) => {\r\n        const { handle, value } = fileHandleAndValues.find(x => x.handle === fileHandle)\r\n        // if (!fileHandle) {\r\n        //     fileHandle = await fs.getNewTextFileHandle()\r\n        //     console.log('entry', fileHandle)\r\n        // }\r\n        debugger;\r\n        if (handle && value) {\r\n            await fs.writeFile(handle, value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"file-creation-page\">\r\n            <div className=\"file-buttons\">\r\n                <button onClick={() => showFolderPicker()}>\r\n                    Choose Folder\r\n                </button>\r\n                <button onClick={clearFile}>\r\n                    Clear\r\n                </button>\r\n                <button onClick={(e) => saveFile(selectedFile)}>\r\n                    Save open File\r\n                </button>\r\n            </div>\r\n            <FileCreatorByName\r\n                createFile={createNewTxtFileHandle}\r\n                createFolder={createNewFolderHandle}\r\n                directoryHandle={folderHandle}\r\n                refresh={refreshInludedFiles}\r\n            />\r\n            <div className=\"directory-editor-container\">\r\n                <div className=\"contents-list\">\r\n                    <DirectoryContents\r\n                        contents={folderContentsHandles}\r\n                        folder={folderHandle}\r\n                        setSelectedFile={setSelectedFile}\r\n                    />\r\n                </div>\r\n                <div className=\"editor-container vh-75-h\">\r\n                    <div className=\"tab-container\">\r\n                        {filesOpenend.map(tab =>\r\n                            <div\r\n                                className={`tab-item${selectedFile === tab ? ' selected' : ''}`}\r\n                                key={tab.name}\r\n                            >\r\n                                <div className=\"file-name\" onClick={() => selectTab(tab)}>\r\n                                    {tab.name}\r\n                                </div>\r\n                                <div className=\"file-close-x\" onClick={() => closeTab(tab)}>\r\n                                    (X)\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    {filesOpenend.map(tab => {\r\n                        return (\r\n                            <div\r\n                                className={`monaco-list`}\r\n                                key={tab.name}\r\n                                style={selectedFile === tab ? {} : { display: 'none' }}\r\n                            >\r\n                                <MonacoEditor\r\n                                    selectedFile={tab}\r\n                                />\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState } from 'react'\r\nimport { EditorPage } from '../../pages/editorPage_OLD/EditorPage'\r\nimport { FileCreationPage } from '../../pages/fileCreationPage/FileCreationPage'\r\nimport './NavRouter.scss'\r\n\r\nexport const NavRouter = () => {\r\n    const [route, setRoute] = useState('');\r\n\r\n    const handleAnchorClick = (e, route) => {\r\n        e.preventDefault()\r\n        setRoute(route);\r\n    }\r\n\r\n    const renderRoute = (route) => {\r\n        switch (route) {\r\n            case 'editor':\r\n                return <EditorPage />\r\n            case 'file-creation':\r\n                return <FileCreationPage />\r\n            default:\r\n                return <FileCreationPage />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav>\r\n                {/* <a href=\"#\" onClick={(e) => handleAnchorClick(e, 'editor')}>\r\n                    Editor\r\n                </a> */}\r\n                <a href=\"#\" onClick={(e) => handleAnchorClick(e, 'file-creation')}>\r\n                    File Creation\r\n                </a>\r\n            </nav>\r\n            {\r\n                renderRoute(route)\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { NavRouter } from './components/navRouter/NavRouter'\nimport { ToastProvider } from 'react-toast-notifications'\nimport { FilesContextProvider } from './context/FilesContext'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <ToastProvider autoDismissTimeout={4000}>\n        <FilesContextProvider>\n          <NavRouter />\n        </FilesContextProvider>\n      </ToastProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}